# coding=utf-8
"""
Test configuration generation
"""

#: Lines that does not match between Javascript and Python generator
NOT_MATCHING = (
    # Skip "generated by" lines that differ
    'http://localhost:5500/#server=',
    'Mozilla SSL Generator, Python edition',

    # Skip DH param comment that differ
    '> /path/to/dhparam.pem',
    '>> /path/to/signed_cert_and_intermediate_certs_and_dhparams')


def normalize(text):
    """
    Normalize configuration to be generator independent.

    Args:
        text (str): Text.

    Returns:
        list of str: lines.
    """
    return [line for line in text.splitlines()
            if not any(skip in line for skip in NOT_MATCHING)]


def test_render_template(server, ref_generate):
    """
    Test if error when rendering template.

    Args:
        server (str): Server name.
        ref_generate (function): Function that generate configuration from
            Mozilla Javascript generator.
    """
    from ssl_config import generate, CONFIGS, UnsupportedConfiguration

    for config in CONFIGS:
        # Test: Generate configuration
        try:
            result = generate(server, config)
            assert result

        except UnsupportedConfiguration as exception:
            # Some servers does not support TLSv1.3 and should raise
            # proper exception with the modern configuration
            if 'TLSv1.3' in exception.args[0] and config == 'modern':
                continue
            raise

        # Test: compare reference
        reference = None
        while not reference:
            reference = ref_generate(server, config)

        assert normalize(reference) == normalize(result)
